/*
cd /Volumes/Media/Software/caelyf/caelyf-template-project-0.1d
export PATH=/opt/local/bin:/opt/local/sbin:.:/usr/local/bin:/Volumes/Media/Software/gradle-1.4/bin:/Volumes/Media/Software/Play-1.2.4:/bin:/Volumes/Media/Software/groovy-2.0.5/bin:/Volumes/Media/Software/appengine-java-sdk-1.7.0/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/local/git/bin

// for git 1.8.2
iMac:groovysamples jim$ echo  $PATH
/opt/local/bin:/opt/local/sbin:.:/usr/local/git/bin:/usr/local/bin:/Volumes/Media/Software/gradle-1.4/bin:/Volumes/Media/Software/Play-1.2.4:/bin:/Volumes/Media/Software/groovy-2.0.5/bin:/Volumes/Media/Software/appengine-java-sdk-1.7.0/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin
----------------------
how to connect to mysql db in gradle: http://stackoverflow.com/questions/6329872/how-to-add-external-jar-files-to-gradle-build-script
*/
//import org.apache.ivy.core.report.ResolveReport
//apply plugin:'java'
apply plugin:'groovy'
apply plugin:'application'
//apply plugin:'gradle-cf-plugin'
 
// to add junit to build.gradle:
repositories {
    //mavenLocal()
    mavenCentral()
    //mavenRepo("http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.pom")
    maven { url "http://repo.springsource.org/libs-milestone-s3-cache" }
}

dependencies {
    //groovy localGroovy()
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    groovy group: 'org.apache.ivy', name:'ivy', version:'2.2.0' 
    testCompile 'junit:junit:4.11'
    //compile group: 'javax.servlet',        name: 'servlet-api', version: '2.5' 
    //compile group: 'mysql-connector-java', name:'mysql', version: '5.1.6'
    //compile 'mysql:mysql-connector-java:5.1.6'
    //compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.16'
    //compile group:'com.miglayout', name:'miglayout', version:'3.7.4'
    //runtime group: 'org.gradle.api.plugins', name: 'gradle-cf-plugin', version: '0.2.1-SNAPSHOT'
    //classpath group: 'org.gradle.api.plugins', name: 'gradle-cf-plugin', version: '0.2.0'
    'org.gradle.api.plugins:gradle-cf-plugin:0.2.0'
    //compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.16'
}

/*
sourceSets {
    main {
        java { srcDirs = [] }    // no source dirs for the java compiler
        groovy { srcDir 'src/main' }  // compile everything in src/main with groovy but not src/test code which ignores junit dependency
   }

   // this is to turn off compiles of test source
   test {
        java { srcDirs  = [] }        // 'src'}    // 'src/test/java' }    // source dirs for the java compiler for testing
        groovy { srcDir = [] }        // 'src/test/' }  // compile somethings in src/ with groovy testing so no inter dependencies allowed in testing :P
   }
} // end of sourceSets
*/

// Iterate over the source sets
sourceSets.all {
    println name
}

// this code may sort out the issue of class dependencies between groovy and java
// compiled classes
//compileJava.enabled = false
//sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]
 
// for a java -> groovy only dependency, use this instead:
//compileJava.dependsOn("compileGroovy")

test.testLogging { exceptionFormat "full" }
test.maxParallelForks = Runtime.runtime.availableProcessors()

test
{

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=192m'

	maxParallelForks = Runtime.runtime.availableProcessors()
	// does work if you chg the workingDir, so it influences the java file relative path access
	//workingDir = new File('/Volumes/Media/Software/groovysamples/src/main/groovy')
	println "workingDir is "+workingDir // = workingDir is /Volumes/Media/Software/menus

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event -> logger.lifecycle("Test: " + descriptor + " gave std out/err: " + event.message ) }
}


// simple tasks  to run individual classes
task(runSimple, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.Menus'  // 'test24'  //
	classpath = sourceSets.main.runtimeClasspath
	//args 'kids'
	systemProperty 'simple.message', 'Hello '
}

// confirm if  a single file has a menu signature :=*MENUTITLE	
// using filename as string into the constructor
task(runFileMenu, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.MenuFile'  // 'test24'  //
	classpath = sourceSets.main.runtimeClasspath
	args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}

task(runMenus, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.Menus'
	classpath = sourceSets.main.runtimeClasspath
	args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}

task(runCommandSet, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.CommandSet'
	classpath = sourceSets.main.runtimeClasspath
}

task(runBB, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.BottomBorder' 
	classpath = sourceSets.main.runtimeClasspath
	args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}

task(runSearch, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.Search' 
	classpath = sourceSets.main.runtimeClasspath
	args './resources'
	systemProperty 'simple.message', 'Hello '
}

task(runPanelSupport, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.PanelSupport' 
	classpath = sourceSets.main.runtimeClasspath
	//args './resources/'
	//systemProperty 'simple.message', 'Hello '
}

task(runSupport, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.Support' 
	classpath = sourceSets.main.runtimeClasspath
}

task(runFonts, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.FontSupport' 
	classpath = sourceSets.main.runtimeClasspath
	args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}

task(runColorManager, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.ColorManager' 
	classpath = sourceSets.main.runtimeClasspath
	args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}

task(runMenuLine, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.MenuLine' 
	classpath = sourceSets.main.runtimeClasspath
	//args 'jim.txt'
	//systemProperty 'simple.message', 'Hello '
}

task(runMenuItemObject, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.MenuItemObject' 
	classpath = sourceSets.main.runtimeClasspath
	//args 'jim.txt'
	//systemProperty 'simple.message', 'Hello '
}



task(runEatFF, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.ConsumeFirefoxBookmarks' 
	classpath = sourceSets.main.runtimeClasspath
	//args 'jim.txt'
	systemProperty 'simple.message', 'Hello '
}


task(runPathFinder, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.support.PathFinder'  
	classpath = sourceSets.main.runtimeClasspath
	args 'jar:file:/Volumes/Media1/Software/menus/build/libs/menus-1.0.jar!/org/jnorthr/menus/support/PathFinder.class'
}


task(runHelpWindow, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.help.HelpWindow'  
	classpath = sourceSets.main.runtimeClasspath
	args './resources/help.html'
	systemProperty 'simple.message', 'Hello '
}

task(runSplash, dependsOn: 'classes', type: JavaExec) 
{
	main = 'org.jnorthr.menus.splasher.Splasher'  
	classpath = sourceSets.main.runtimeClasspath += files('${workingDir}/resources/images/loading.gif') + sourceSets.main.compileClasspath
	args './resources/sample1.groovy'
	systemProperty 'simple.message', 'Hello '
}

println "project is named :"+project
println "project.buildDir:"+project.buildDir

// following used in 'gradle run'
defaultTasks 'runSimple'

// this line needed for the 'run' feature of the 'application' plugin
// when you try: gradlew run
// then the class shown here is the one that is executed
mainClassName = "org.jnorthr.menus.Menus"


// declare minimum level of java for both compile and execute phases
sourceCompatibility = 1.5
targetCompatibility=1.5

// your version of this app - nice for the name of your jar
version = '1.0'

// customize the jar MANIFEST.MF 
// add some specific attributes that control how the jar manifest is constructed
// cd jnorthr-mouseless-menus-8f4a148 
// java -jar ./build/libs/menus-1.0.jar 
jar {
    dependsOn configurations.runtime
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes 'Implementation-Title': 'Mouseless Menus', 'Implementation-Version': version
        attributes provider: 'jnorthr'
        attributes("Main-Class": "org.jnorthr.menus.Menus")
	    attributes args: './resources'
    }
}


task zip(type: Zip) {
    baseName = 'MouselessMenus'
    appendix = 'core'
	version = 0.1
    from projectDir
    include 'resources/**/*'	
    into(zip.destinationDir) {
        from configurations.runtime
    }
} // end of zip task


task srcZip2(type: Zip) {
    baseName = 'MouselessMenus'
    appendix = 'source'
	version = 0.1
    classifier = 'src'
    from projectDir
    //include sourceSets.allSource.srcDirs*.collect { relativePath(it) }.flatten()
    include 'LICENCE', 'README', 'NOTICE', 'gradlew*'
    into(zip.destinationDir) {
        from configurations.runtime
    }
}
//assemble.dependsOn(srcZip)


task zip2(type: Zip) {
    baseName = 'MouselessMenus'
    appendix = 'core'
    version = 0.12
    from jar.outputs.files
    from('resources/') {
        into('resources')
    }
    include 'README.md','gradlew*'
}
task srcZip(type: Zip) {
    baseName = 'MouselessMenus'
    appendix = 'core'
    version = 0.13
    classifier = 'src'
    from jar.outputs.files
    include 'LICENCE', 'README*', 'NOTICE', 'gradlew*', '*.jar'
}
/*
from projectDir
    from('libs') {
        include '*.jar'
        into('lib')
    }
*/
    //include sourceSets*.allSource.srcDirs*.collect { relativePath(it) }.flatten()


println zip.archiveName
println zip2.archiveName
println srcZip.archiveName

println relativePath(zip.destinationDir)
println relativePath(zip.archivePath)
println relativePath(zip2.destinationDir)
println relativePath(zip2.archivePath)
//project.ext.prop1 = zip.destinationDir + "/resources"


// following methods used in copyTask below
def getDestinationDir = {
    file("${project.buildDir}/distributions")
}

def getLibDir = {
    file("${project.buildDir}/libs")
}

task copyTask(type: Zip) {
    baseName = 'Deployment'

    // Copy from directory
    into("${getDestinationDir}/resources") 
		{
			from 'resources'
    		include '**/*.txt', '**/*.txt'
		}

    // Copy from directory
    into("${getDestinationDir}/resources/properties") 
		{
			from 'resources/properties'
    		include '**/*.properties', '**/*.properties'
			exclude '**/images/**'
		}

    // Copy from directory
    into("${getDestinationDir}/resources/documents") 
		{
			from 'resources/documents'
    		include '**/*.html', '**/*.htm'
			include '**/images/**'
			include '**/*.png'
		}

    // Copy single file
    from 'README.md'

	from getLibDir
    include '**/*.jar'	

    // Use closure to resolve files.
    //include getTextFiles

    exclude 'INSTALL.txt'

    // Copy into directory dist
    // resolved via closure.
    //into getDestinationDir
    into("${getDestinationDir}") {
        from configurations.runtime
    }
}


//fred+="/resources"
//println "resources now points to :"+ project.ext.prop1

/*
	MouselessMenus-core-0.1.zip
	build/distributions
	build/distributions/MouselessMenus-core-0.1.zip
*/


task wrapper(type: Wrapper) {
    gradleVersion = '1.1'
}